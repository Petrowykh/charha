from datetime import datetime
from os import waitpid
from typing import Text
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext, storage
from aiogram.types import reply_keyboard
from aiogram.types import message
from aiogram.types.inline_keyboard import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.message import ParseMode
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging, json, asyncio

# from attr import field
from config import TOKEN

import keyboards as kb
from work_db import Baza

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
baza = Baza('db/charhadb.db')
chat = 'https://t.me/CharhaChat'

DELAY = 60*60

async def send_smile():
    baza.delete_events()
    if (datetime.now().hour > 8) and (datetime.now().hour < 23):
        cu, cs, info_t, info_f = baza.info_admin()
        await bot.send_message('455245688', f'–í –ë–î {cu} üë®‚ÄçüöÄ –∏ {cs} üè¨\n –û—á–∏—â–∞–µ–º –ë–î events\n–ü–æ–ª–µ–∑–Ω—ã—Ö-{info_t}, –ó–∞–ø—Ä–æ—Å–æ–≤-{info_f}')

def repeat(coro, loop):
    asyncio.ensure_future(coro(), loop=loop)
    loop.call_later(DELAY, repeat, coro, loop)

@dp.message_handler(commands=['start'])
# –≤—ã–≤–æ–¥ –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ 'start'
async def start_command(message: types.Message):
    if baza.check_user(int(message.from_user.id)):
        cu, cs = baza.get_count_user_shops()
        greeting_message = f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë®‚ÄçüöÄ <B> {cu} </B>\n'
        greeting_message = greeting_message + f'–ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ <B> {cs} </B> üè¨ —Ç–æ—Ä–≥–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–∞–º' 
        greeting_message = greeting_message + '\n–û–±—Å—É–∂–¥–µ–Ω–∏–µ :' + chat
    else:
        greeting_message = "\n–í—ã –≤–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å. –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–º–µ—á–∞–Ω–∏—è –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –≤ " + chat
        greeting_message = greeting_message + '–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥—è—Ö –≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö –≥.–ú–∏–Ω—Å–∫–∞, –∞ —Ç–∞–∫–∂–µ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω—è—Ç—å –í–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n<B>–í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç!</B> \n–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä...üëá'
        baza.add_user(int(message.from_user.id), message.from_user.username)
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}' + greeting_message, reply_markup=kb.kb1)


@dp.message_handler(lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ')
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' –∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏–æ–Ω–∞
async def info_shops(message: types.Message):
    await bot.send_message(message.from_user.id, 'üó∫ –†–µ–≥–∏–æ–Ω', reply_markup=kb.ikb3)


@dp.message_handler(content_types=['location'])
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è 'location'
async def get_location(message: types.Message):
    #global g_shop_id # –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—é id –º–∞–≥–∞–∑–∏–Ω–∞
    await bot.delete_message(message.chat.id, message.message_id) # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π
    ikb4 = InlineKeyboardMarkup()
    data_shop = baza.search_shops(message.location['latitude'], message.location['longitude'])
    if data_shop:
        for i in data_shop:
            shop_button_ikb = InlineKeyboardButton(f'üìå {i[2]} - {i[1]}', callback_data='shop' + str(i[0]))
            ikb4.add(shop_button_ikb)
        await bot.send_message(message.from_user.id, '–ü–æ –¥–∞–Ω–Ω—ã–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Ä—è–¥–æ–º —Å –í–∞–º–∏..', reply_markup=ikb4)
    else:
        await bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é üò°, –≤ –±–∞–∑–µ –Ω–µ—Ç —Ä—è–¥–æ–º –º–∞–≥–∞–∑–∏–Ω–æ–≤, –Ω–∞–∂–º–∏—Ç–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"', reply_markup=kb.kb1) 


@dp.callback_query_handler(lambda shop: shop.data.startswith('shop'))
# –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –º–Ω–æ–≥–æ - –≤—ã–±–∏—Ä–∞–µ–º id
async def choose_shop(callback_shop: types.CallbackQuery, state:FSMContext):
    shop_ok = int(callback_shop.data[4:])
    async with state.proxy() as td:
        td['shop_id'] = shop_ok
    await bot.send_message(callback_shop.from_user.id, '–°–∫–æ–ª—å–∫–æ –º–∞—à–∏–Ω ‚ùì', reply_markup=kb.ikb2)


@dp.callback_query_handler(lambda car: car.data.startswith('car'))
async def save_car_ikb2(callback_car: types.CallbackQuery, state: FSMContext):
    car_ok = int(callback_car.data[-1])
    if car_ok > 1:
        car_ok = car_ok * 2 # –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2, –¥–∞–ª–µ–µ –ø—Ä–æ–¥—É–º–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º
    #TODO –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —É—á–µ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω–æ–∫ –ø–æ –∫–æ–ª–∏—á–µ—Ç—Å–≤—É
    async with state.proxy() as td:
        id_shop = td['shop_id']
    baza.add_events(callback_car.from_user.id, id_shop, car_ok, True)
    period = datetime.now().hour
    baza.create_finehours_shop(id_shop, period, car_ok)
    await bot.send_message(callback_car.from_user.id, 'ü§ó –°–ø–∞—Å–∏–±–æ!\n–ò–Ω—Ñ–æ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!', reply_markup=kb.kb1)


@dp.callback_query_handler(lambda region: region.data.startswith('reg'))
# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –¥–µ–ª–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—É –ø–æ —Å–µ—Ç—è–º
async def save_reg_ikb3(callback_region: types.CallbackQuery, state:FSMContext):
    region_ok = int(callback_region.data[-1])
    async with state.proxy() as td:
        td['region'] = region_ok
    ikb4 = InlineKeyboardMarkup(resize_keyboard=True)
    list_net = baza.get_name_net(region_ok)
    check = 0
    net_but = []
    for i in list_net:
        check = check + 1
        cbd = 'net' + i[0]
        net_but.append(InlineKeyboardButton(i[0], callback_data=cbd)) # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±–∏–∫–∞
        if check == 2:
            ikb4.add(net_but[0], net_but[1])
            net_but = []
            check = 0
    if net_but:
        ikb4.add(net_but[0])
    ikb4.add(InlineKeyboardButton('–û–ë–´–ß–ù–´–ô', callback_data='netAS'))
    await bot.send_message(callback_region.from_user.id, '–í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ç—å, –ª–∏–±–æ "–û–ë–´–ß–ù–´–ô"', reply_markup=ikb4)


@dp.callback_query_handler(lambda net: net.data.startswith('net'))
# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ç–∏ –∏ –¥–µ–ª–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—É —Å –∞–¥—Ä–µ—Å–∞–º–∏
async def save_net_ikb4(callback_net: types.CallbackQuery, state:FSMContext):
    net_ok = callback_net.data[3:]
    async with state.proxy() as td:
        region = td['region']
    ikb5 = InlineKeyboardMarkup(resizekeyboard=True)
    if net_ok != 'AS':
        list_address = baza.get_address_shop(region, net_ok, True)
    else:
        list_address = baza.get_address_shop(region, net_ok, False)
    
    sort_list = sorted(list_address, key=lambda addr: addr[1].split(' ')[1][0]) # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    
    for i in sort_list:
        ikb5.add(InlineKeyboardButton(f'üìå {i[1]}', callback_data='addr' + str(i[0])))
    await bot.send_message(callback_net.from_user.id, '–í—ã–±–∏—Ä–∞–µ–º –∞–¥—Ä–µ—Å', reply_markup=ikb5)


@dp.callback_query_handler(lambda addr: addr.data.startswith('addr'))
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async def info_about_shop(callback_addr: types.CallbackQuery, state:FSMContext):
    id_shop = int(callback_addr.data[4:])
    baza.add_events(callback_addr.from_user.id, id_shop, 0, False)
    statistic = baza.get_statistic_shop(id_shop)
    info = baza.get_info_shop(id_shop)
    await bot.send_photo(callback_addr.from_user.id, str(info[5]), str(info[1]))
    #answer_to_user = f'üì≠ –ê–¥—Ä–µ—Å : {info[0]}' 
    time_to = f'\nüïë –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <B> {info[2]}.00 - {info[3]}.00</B>'
    # time_to = time_to + "\nüë©üèª‚Äçü¶≥ –ü—Ä–∏–µ–º–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" –ø–æ–∫–∞ —É–±–∏—Ä–∞–µ–º
    # time_to = time_to + "\nüõå –ù–æ—á–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞ : "
    # if info[4]:
    #     time_to = time_to + '‚úÖ'
    # else:
    #     time_to = time_to + 'üö´'
    # time_to = time_to + "\nüìã –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–µ–º–∫–∏ : "
    # if info[6]:
    #     time_to = time_to + '‚úÖ'
    # else:
    #     time_to = time_to + 'üö´'
    stroka = '\nüöö <U>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º</U>\n'
    if statistic:
        fine_hours = json.loads(statistic[0])
        for i in range(0,23):
            if str(i) in fine_hours.keys():
                stroka = stroka + f'{i}:00-{i+1}:00 : <B>{fine_hours[str(i)]}</B>\n'
    else:
        stroka = stroka + '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n'
    request_user = baza.get_request_count(id_shop)
    if request_user > 1:
        req = f'\nüîé –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {request_user-1}' # -1 –ø–æ—Ç–æ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Ç–æ–∂–µ —É–∂–µ —É—á—Ç–µ–Ω
    else:
        req = '\n‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∞—Å—å'
    charha = baza.get_info_charha(id_shop)
    if charha != None:
        ch = f'\n‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å - {charha[0]} üöõ '
    else:
        ch = "\n‚Ñπ –û–Ω–ª–∞–π–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç üè≥"
    answer = stroka + req + ch
    await bot.send_message(callback_addr.from_user.id, answer, reply_markup=kb.kb1) 


@dp.callback_query_handler()
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ã —Å –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ–º –º–∞—à–∏–Ω–æ–∫
async def enter_cars(message: types.Message):
    await bot.send_message(message.from_user.id,'–ù—É –∫–∞–∫?', reply_markup=kb.kb1)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.call_later(DELAY, repeat, send_smile, loop)
    executor.start_polling(dp)